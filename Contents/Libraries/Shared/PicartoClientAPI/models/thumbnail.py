# coding: utf-8

"""
    Picarto.TV API Documentation

    The Picarto.TV API documentation  Note, for fixed access tokens, the header that needs to be sent is of the format: `Authorization: Bearer yourTokenHere`  This can be generated at https://oauth.picarto.tv/  For chat API, see https://docs.picarto.tv/chat/chat.proto - contact via the email below for implementation details 

    OpenAPI spec version: 1.2.5
    Contact: api@picarto.tv
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Thumbnail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'web': 'str',
        'web_large': 'str',
        'mobile': 'str',
        'tablet': 'str'
    }

    attribute_map = {
        'web': 'web',
        'web_large': 'web_large',
        'mobile': 'mobile',
        'tablet': 'tablet'
    }

    def __init__(self, web=None, web_large=None, mobile=None, tablet=None):
        """
        Thumbnail - a model defined in Swagger
        """

        self._web = None
        self._web_large = None
        self._mobile = None
        self._tablet = None

        if web is not None:
          self.web = web
        if web_large is not None:
          self.web_large = web_large
        if mobile is not None:
          self.mobile = mobile
        if tablet is not None:
          self.tablet = tablet

    @property
    def web(self):
        """
        Gets the web of this Thumbnail.
        Web size

        :return: The web of this Thumbnail.
        :rtype: str
        """
        return self._web

    @web.setter
    def web(self, web):
        """
        Sets the web of this Thumbnail.
        Web size

        :param web: The web of this Thumbnail.
        :type: str
        """

        self._web = web

    @property
    def web_large(self):
        """
        Gets the web_large of this Thumbnail.
        Web HD size

        :return: The web_large of this Thumbnail.
        :rtype: str
        """
        return self._web_large

    @web_large.setter
    def web_large(self, web_large):
        """
        Sets the web_large of this Thumbnail.
        Web HD size

        :param web_large: The web_large of this Thumbnail.
        :type: str
        """

        self._web_large = web_large

    @property
    def mobile(self):
        """
        Gets the mobile of this Thumbnail.
        Mobile size

        :return: The mobile of this Thumbnail.
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """
        Sets the mobile of this Thumbnail.
        Mobile size

        :param mobile: The mobile of this Thumbnail.
        :type: str
        """

        self._mobile = mobile

    @property
    def tablet(self):
        """
        Gets the tablet of this Thumbnail.
        Tablet size

        :return: The tablet of this Thumbnail.
        :rtype: str
        """
        return self._tablet

    @tablet.setter
    def tablet(self, tablet):
        """
        Sets the tablet of this Thumbnail.
        Tablet size

        :param tablet: The tablet of this Thumbnail.
        :type: str
        """

        self._tablet = tablet

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Thumbnail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
