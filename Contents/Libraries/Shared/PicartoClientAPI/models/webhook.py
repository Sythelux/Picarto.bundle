# coding: utf-8

"""
    Picarto.TV API Documentation

    The Picarto.TV API documentation  Note, for fixed access tokens, the header that needs to be sent is of the format: `Authorization: Bearer yourTokenHere`  This can be generated at https://oauth.picarto.tv/  For chat API, see https://docs.picarto.tv/chat/chat.proto - contact via the email below for implementation details 

    OpenAPI spec version: 1.2.5
    Contact: api@picarto.tv
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Webhook(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'channel': 'BasicChannelInfo',
        'type': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'id': 'id',
        'channel': 'channel',
        'type': 'type',
        'uri': 'uri'
    }

    def __init__(self, id=None, channel=None, type=None, uri=None):
        """
        Webhook - a model defined in Swagger
        """

        self._id = None
        self._channel = None
        self._type = None
        self._uri = None

        if id is not None:
          self.id = id
        if channel is not None:
          self.channel = channel
        if type is not None:
          self.type = type
        if uri is not None:
          self.uri = uri

    @property
    def id(self):
        """
        Gets the id of this Webhook.
        Webhook ID

        :return: The id of this Webhook.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Webhook.
        Webhook ID

        :param id: The id of this Webhook.
        :type: str
        """

        self._id = id

    @property
    def channel(self):
        """
        Gets the channel of this Webhook.

        :return: The channel of this Webhook.
        :rtype: BasicChannelInfo
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """
        Sets the channel of this Webhook.

        :param channel: The channel of this Webhook.
        :type: BasicChannelInfo
        """

        self._channel = channel

    @property
    def type(self):
        """
        Gets the type of this Webhook.
        Webhook type

        :return: The type of this Webhook.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Webhook.
        Webhook type

        :param type: The type of this Webhook.
        :type: str
        """

        self._type = type

    @property
    def uri(self):
        """
        Gets the uri of this Webhook.
        Webhook target URI

        :return: The uri of this Webhook.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this Webhook.
        Webhook target URI

        :param uri: The uri of this Webhook.
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Webhook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
