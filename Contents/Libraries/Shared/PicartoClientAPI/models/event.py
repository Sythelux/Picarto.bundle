# coding: utf-8

"""
    Picarto.TV API Documentation

    The Picarto.TV API documentation  Note, for fixed access tokens, the header that needs to be sent is of the format: `Authorization: Bearer yourTokenHere`  This can be generated at https://oauth.picarto.tv/  For chat API, see https://docs.picarto.tv/chat/chat.proto - contact via the email below for implementation details 

    OpenAPI spec version: 1.2.5
    Contact: api@picarto.tv
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Event(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'channel_details': 'BasicChannelInfo',
        'category': 'str',
        'ticket_price': 'int',
        'ticket_limit': 'int',
        'tickets_sold': 'int',
        'started': 'bool',
        'adult': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'channel_details': 'channel_details',
        'category': 'category',
        'ticket_price': 'ticket_price',
        'ticket_limit': 'ticket_limit',
        'tickets_sold': 'tickets_sold',
        'started': 'started',
        'adult': 'adult'
    }

    def __init__(self, id=None, channel_details=None, category=None, ticket_price=None, ticket_limit=None, tickets_sold=None, started=None, adult=None):
        """
        Event - a model defined in Swagger
        """

        self._id = None
        self._channel_details = None
        self._category = None
        self._ticket_price = None
        self._ticket_limit = None
        self._tickets_sold = None
        self._started = None
        self._adult = None

        if id is not None:
          self.id = id
        if channel_details is not None:
          self.channel_details = channel_details
        if category is not None:
          self.category = category
        if ticket_price is not None:
          self.ticket_price = ticket_price
        if ticket_limit is not None:
          self.ticket_limit = ticket_limit
        if tickets_sold is not None:
          self.tickets_sold = tickets_sold
        if started is not None:
          self.started = started
        if adult is not None:
          self.adult = adult

    @property
    def id(self):
        """
        Gets the id of this Event.
        Event ID

        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Event.
        Event ID

        :param id: The id of this Event.
        :type: str
        """

        self._id = id

    @property
    def channel_details(self):
        """
        Gets the channel_details of this Event.

        :return: The channel_details of this Event.
        :rtype: BasicChannelInfo
        """
        return self._channel_details

    @channel_details.setter
    def channel_details(self, channel_details):
        """
        Sets the channel_details of this Event.

        :param channel_details: The channel_details of this Event.
        :type: BasicChannelInfo
        """

        self._channel_details = channel_details

    @property
    def category(self):
        """
        Gets the category of this Event.
        The category of this event

        :return: The category of this Event.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this Event.
        The category of this event

        :param category: The category of this Event.
        :type: str
        """

        self._category = category

    @property
    def ticket_price(self):
        """
        Gets the ticket_price of this Event.
        The price (in US cents - 100 = $1.00)

        :return: The ticket_price of this Event.
        :rtype: int
        """
        return self._ticket_price

    @ticket_price.setter
    def ticket_price(self, ticket_price):
        """
        Sets the ticket_price of this Event.
        The price (in US cents - 100 = $1.00)

        :param ticket_price: The ticket_price of this Event.
        :type: int
        """

        self._ticket_price = ticket_price

    @property
    def ticket_limit(self):
        """
        Gets the ticket_limit of this Event.
        The total number of tickets able to be sold (0 = unlimited)

        :return: The ticket_limit of this Event.
        :rtype: int
        """
        return self._ticket_limit

    @ticket_limit.setter
    def ticket_limit(self, ticket_limit):
        """
        Sets the ticket_limit of this Event.
        The total number of tickets able to be sold (0 = unlimited)

        :param ticket_limit: The ticket_limit of this Event.
        :type: int
        """

        self._ticket_limit = ticket_limit

    @property
    def tickets_sold(self):
        """
        Gets the tickets_sold of this Event.
        The total number of tickets sold so far

        :return: The tickets_sold of this Event.
        :rtype: int
        """
        return self._tickets_sold

    @tickets_sold.setter
    def tickets_sold(self, tickets_sold):
        """
        Sets the tickets_sold of this Event.
        The total number of tickets sold so far

        :param tickets_sold: The tickets_sold of this Event.
        :type: int
        """

        self._tickets_sold = tickets_sold

    @property
    def started(self):
        """
        Gets the started of this Event.
        If the event has started

        :return: The started of this Event.
        :rtype: bool
        """
        return self._started

    @started.setter
    def started(self, started):
        """
        Sets the started of this Event.
        If the event has started

        :param started: The started of this Event.
        :type: bool
        """

        self._started = started

    @property
    def adult(self):
        """
        Gets the adult of this Event.
        If the event is an adult event

        :return: The adult of this Event.
        :rtype: bool
        """
        return self._adult

    @adult.setter
    def adult(self, adult):
        """
        Sets the adult of this Event.
        If the event is an adult event

        :param adult: The adult of this Event.
        :type: bool
        """

        self._adult = adult

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
