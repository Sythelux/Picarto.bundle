# coding: utf-8

"""
    Picarto.TV API Documentation

    The Picarto.TV API documentation  Note, for fixed access tokens, the header that needs to be sent is of the format: `Authorization: Bearer yourTokenHere`  This can be generated at https://oauth.picarto.tv/  For chat API, see https://docs.picarto.tv/chat/chat.proto - contact via the email below for implementation details 

    OpenAPI spec version: 1.2.5
    Contact: api@picarto.tv
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Category(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'total_channels': 'int',
        'online_channels': 'int',
        'viewers': 'int',
        'adult': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'total_channels': 'total_channels',
        'online_channels': 'online_channels',
        'viewers': 'viewers',
        'adult': 'adult'
    }

    def __init__(self, id=None, name=None, total_channels=None, online_channels=None, viewers=None, adult=None):
        """
        Category - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._total_channels = None
        self._online_channels = None
        self._viewers = None
        self._adult = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if total_channels is not None:
          self.total_channels = total_channels
        if online_channels is not None:
          self.online_channels = online_channels
        if viewers is not None:
          self.viewers = viewers
        if adult is not None:
          self.adult = adult

    @property
    def id(self):
        """
        Gets the id of this Category.
        The category ID

        :return: The id of this Category.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Category.
        The category ID

        :param id: The id of this Category.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Category.
        The category name

        :return: The name of this Category.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Category.
        The category name

        :param name: The name of this Category.
        :type: str
        """

        self._name = name

    @property
    def total_channels(self):
        """
        Gets the total_channels of this Category.
        The total number of channels that are this category

        :return: The total_channels of this Category.
        :rtype: int
        """
        return self._total_channels

    @total_channels.setter
    def total_channels(self, total_channels):
        """
        Sets the total_channels of this Category.
        The total number of channels that are this category

        :param total_channels: The total_channels of this Category.
        :type: int
        """

        self._total_channels = total_channels

    @property
    def online_channels(self):
        """
        Gets the online_channels of this Category.
        The number of channels that are live using this category

        :return: The online_channels of this Category.
        :rtype: int
        """
        return self._online_channels

    @online_channels.setter
    def online_channels(self, online_channels):
        """
        Sets the online_channels of this Category.
        The number of channels that are live using this category

        :param online_channels: The online_channels of this Category.
        :type: int
        """

        self._online_channels = online_channels

    @property
    def viewers(self):
        """
        Gets the viewers of this Category.
        The total number of viewers

        :return: The viewers of this Category.
        :rtype: int
        """
        return self._viewers

    @viewers.setter
    def viewers(self, viewers):
        """
        Sets the viewers of this Category.
        The total number of viewers

        :param viewers: The viewers of this Category.
        :type: int
        """

        self._viewers = viewers

    @property
    def adult(self):
        """
        Gets the adult of this Category.
        If the category is an adult category

        :return: The adult of this Category.
        :rtype: bool
        """
        return self._adult

    @adult.setter
    def adult(self, adult):
        """
        Sets the adult of this Category.
        If the category is an adult category

        :param adult: The adult of this Category.
        :type: bool
        """

        self._adult = adult

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Category):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
