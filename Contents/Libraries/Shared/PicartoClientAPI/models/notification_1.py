# coding: utf-8

"""
    Picarto.TV API Documentation

    The Picarto.TV API documentation  Note, for fixed access tokens, the header that needs to be sent is of the format: `Authorization: Bearer yourTokenHere`  This can be generated at https://oauth.picarto.tv/  For chat API, see https://docs.picarto.tv/chat/chat.proto - contact via the email below for implementation details 

    OpenAPI spec version: 1.2.5
    Contact: api@picarto.tv
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Notification1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'uuid': 'str',
        'body': 'str',
        'channel': 'str',
        'uri': 'str',
        'has_icon': 'str',
        'timestamp': 'int',
        'unread': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'uuid': 'uuid',
        'body': 'body',
        'channel': 'channel',
        'uri': 'uri',
        'has_icon': 'hasIcon',
        'timestamp': 'timestamp',
        'unread': 'unread'
    }

    def __init__(self, type=None, uuid=None, body=None, channel=None, uri=None, has_icon=None, timestamp=None, unread=None):
        """
        Notification1 - a model defined in Swagger
        """

        self._type = None
        self._uuid = None
        self._body = None
        self._channel = None
        self._uri = None
        self._has_icon = None
        self._timestamp = None
        self._unread = None

        if type is not None:
          self.type = type
        if uuid is not None:
          self.uuid = uuid
        if body is not None:
          self.body = body
        if channel is not None:
          self.channel = channel
        if uri is not None:
          self.uri = uri
        if has_icon is not None:
          self.has_icon = has_icon
        if timestamp is not None:
          self.timestamp = timestamp
        if unread is not None:
          self.unread = unread

    @property
    def type(self):
        """
        Gets the type of this Notification1.
        The notification type

        :return: The type of this Notification1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Notification1.
        The notification type

        :param type: The type of this Notification1.
        :type: str
        """
        allowed_values = ["pinned", "live", "follow", "subscribe", "eventCreate", "eventStart", "recordingCreate", "multiInvite", "multiRevoke", "multiRemove", "multiLeave", "multiAccept"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uuid(self):
        """
        Gets the uuid of this Notification1.
        UUID of the notification

        :return: The uuid of this Notification1.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this Notification1.
        UUID of the notification

        :param uuid: The uuid of this Notification1.
        :type: str
        """

        self._uuid = uuid

    @property
    def body(self):
        """
        Gets the body of this Notification1.
        For global notifications, this contains the HTML body of the notification. Won't appear on non-pinned notifications

        :return: The body of this Notification1.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this Notification1.
        For global notifications, this contains the HTML body of the notification. Won't appear on non-pinned notifications

        :param body: The body of this Notification1.
        :type: str
        """

        self._body = body

    @property
    def channel(self):
        """
        Gets the channel of this Notification1.
        The channel that this notification applies to. Won't appear on pinned notifications

        :return: The channel of this Notification1.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """
        Sets the channel of this Notification1.
        The channel that this notification applies to. Won't appear on pinned notifications

        :param channel: The channel of this Notification1.
        :type: str
        """

        self._channel = channel

    @property
    def uri(self):
        """
        Gets the uri of this Notification1.
        Link to go to when clicking the notification

        :return: The uri of this Notification1.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this Notification1.
        Link to go to when clicking the notification

        :param uri: The uri of this Notification1.
        :type: str
        """

        self._uri = uri

    @property
    def has_icon(self):
        """
        Gets the has_icon of this Notification1.
        If the channel attached to the notification has a user icon set

        :return: The has_icon of this Notification1.
        :rtype: str
        """
        return self._has_icon

    @has_icon.setter
    def has_icon(self, has_icon):
        """
        Sets the has_icon of this Notification1.
        If the channel attached to the notification has a user icon set

        :param has_icon: The has_icon of this Notification1.
        :type: str
        """

        self._has_icon = has_icon

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Notification1.
        Unix timestamp of notification

        :return: The timestamp of this Notification1.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Notification1.
        Unix timestamp of notification

        :param timestamp: The timestamp of this Notification1.
        :type: int
        """

        self._timestamp = timestamp

    @property
    def unread(self):
        """
        Gets the unread of this Notification1.
        Whether this notification is unread

        :return: The unread of this Notification1.
        :rtype: bool
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """
        Sets the unread of this Notification1.
        Whether this notification is unread

        :param unread: The unread of this Notification1.
        :type: bool
        """

        self._unread = unread

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Notification1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
