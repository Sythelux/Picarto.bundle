# coding: utf-8

"""
    Picarto.TV API Documentation

    The Picarto.TV API documentation  Note, for fixed access tokens, the header that needs to be sent is of the format: `Authorization: Bearer yourTokenHere`  This can be generated at https://oauth.picarto.tv/  For chat API, see https://docs.picarto.tv/chat/chat.proto - contact via the email below for implementation details 

    OpenAPI spec version: 1.2.5
    Contact: api@picarto.tv
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MobileNotifySettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'master': 'bool',
        'follow': 'bool',
        'live': 'bool',
        'subscribe': 'bool'
    }

    attribute_map = {
        'master': 'master',
        'follow': 'follow',
        'live': 'live',
        'subscribe': 'subscribe'
    }

    def __init__(self, master=None, follow=None, live=None, subscribe=None):
        """
        MobileNotifySettings - a model defined in Swagger
        """

        self._master = None
        self._follow = None
        self._live = None
        self._subscribe = None

        if master is not None:
          self.master = master
        if follow is not None:
          self.follow = follow
        if live is not None:
          self.live = live
        if subscribe is not None:
          self.subscribe = subscribe

    @property
    def master(self):
        """
        Gets the master of this MobileNotifySettings.
        Master notifications switch

        :return: The master of this MobileNotifySettings.
        :rtype: bool
        """
        return self._master

    @master.setter
    def master(self, master):
        """
        Sets the master of this MobileNotifySettings.
        Master notifications switch

        :param master: The master of this MobileNotifySettings.
        :type: bool
        """

        self._master = master

    @property
    def follow(self):
        """
        Gets the follow of this MobileNotifySettings.
        Follow notifications

        :return: The follow of this MobileNotifySettings.
        :rtype: bool
        """
        return self._follow

    @follow.setter
    def follow(self, follow):
        """
        Sets the follow of this MobileNotifySettings.
        Follow notifications

        :param follow: The follow of this MobileNotifySettings.
        :type: bool
        """

        self._follow = follow

    @property
    def live(self):
        """
        Gets the live of this MobileNotifySettings.
        Live notifications

        :return: The live of this MobileNotifySettings.
        :rtype: bool
        """
        return self._live

    @live.setter
    def live(self, live):
        """
        Sets the live of this MobileNotifySettings.
        Live notifications

        :param live: The live of this MobileNotifySettings.
        :type: bool
        """

        self._live = live

    @property
    def subscribe(self):
        """
        Gets the subscribe of this MobileNotifySettings.
        Subscribe notifications

        :return: The subscribe of this MobileNotifySettings.
        :rtype: bool
        """
        return self._subscribe

    @subscribe.setter
    def subscribe(self, subscribe):
        """
        Sets the subscribe of this MobileNotifySettings.
        Subscribe notifications

        :param subscribe: The subscribe of this MobileNotifySettings.
        :type: bool
        """

        self._subscribe = subscribe

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MobileNotifySettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
