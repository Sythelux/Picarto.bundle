# coding: utf-8

"""
    Picarto.TV API Documentation

    The Picarto.TV API documentation  Note, for fixed access tokens, the header that needs to be sent is of the format: `Authorization: Bearer yourTokenHere`  This can be generated at https://oauth.picarto.tv/  For chat API, see https://docs.picarto.tv/chat/chat.proto - contact via the email below for implementation details 

    OpenAPI spec version: 1.2.5
    Contact: api@picarto.tv
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_details': 'ChannelDetails',
        'email': 'str',
        'creation_date': 'date',
        'private_key': 'str',
        'nsfw_enabled': 'bool',
        'nsfw_app': 'bool'
    }

    attribute_map = {
        'channel_details': 'channel_details',
        'email': 'email',
        'creation_date': 'creation_date',
        'private_key': 'private_key',
        'nsfw_enabled': 'nsfw_enabled',
        'nsfw_app': 'nsfw_app'
    }

    def __init__(self, channel_details=None, email=None, creation_date=None, private_key=None, nsfw_enabled=None, nsfw_app=None):
        """
        UserData - a model defined in Swagger
        """

        self._channel_details = None
        self._email = None
        self._creation_date = None
        self._private_key = None
        self._nsfw_enabled = None
        self._nsfw_app = None

        if channel_details is not None:
          self.channel_details = channel_details
        if email is not None:
          self.email = email
        if creation_date is not None:
          self.creation_date = creation_date
        if private_key is not None:
          self.private_key = private_key
        if nsfw_enabled is not None:
          self.nsfw_enabled = nsfw_enabled
        if nsfw_app is not None:
          self.nsfw_app = nsfw_app

    @property
    def channel_details(self):
        """
        Gets the channel_details of this UserData.

        :return: The channel_details of this UserData.
        :rtype: ChannelDetails
        """
        return self._channel_details

    @channel_details.setter
    def channel_details(self, channel_details):
        """
        Sets the channel_details of this UserData.

        :param channel_details: The channel_details of this UserData.
        :type: ChannelDetails
        """

        self._channel_details = channel_details

    @property
    def email(self):
        """
        Gets the email of this UserData.
        The email address of the user

        :return: The email of this UserData.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserData.
        The email address of the user

        :param email: The email of this UserData.
        :type: str
        """

        self._email = email

    @property
    def creation_date(self):
        """
        Gets the creation_date of this UserData.
        The date of the channel's creation

        :return: The creation_date of this UserData.
        :rtype: date
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this UserData.
        The date of the channel's creation

        :param creation_date: The creation_date of this UserData.
        :type: date
        """

        self._creation_date = creation_date

    @property
    def private_key(self):
        """
        Gets the private_key of this UserData.
        The user's key to watch their private stream

        :return: The private_key of this UserData.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """
        Sets the private_key of this UserData.
        The user's key to watch their private stream

        :param private_key: The private_key of this UserData.
        :type: str
        """

        self._private_key = private_key

    @property
    def nsfw_enabled(self):
        """
        Gets the nsfw_enabled of this UserData.
        If this user has enabled NSFW content on the site

        :return: The nsfw_enabled of this UserData.
        :rtype: bool
        """
        return self._nsfw_enabled

    @nsfw_enabled.setter
    def nsfw_enabled(self, nsfw_enabled):
        """
        Sets the nsfw_enabled of this UserData.
        If this user has enabled NSFW content on the site

        :param nsfw_enabled: The nsfw_enabled of this UserData.
        :type: bool
        """

        self._nsfw_enabled = nsfw_enabled

    @property
    def nsfw_app(self):
        """
        Gets the nsfw_app of this UserData.
        If this user can see NSFW content in-app

        :return: The nsfw_app of this UserData.
        :rtype: bool
        """
        return self._nsfw_app

    @nsfw_app.setter
    def nsfw_app(self, nsfw_app):
        """
        Sets the nsfw_app of this UserData.
        If this user can see NSFW content in-app

        :param nsfw_app: The nsfw_app of this UserData.
        :type: bool
        """

        self._nsfw_app = nsfw_app

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
