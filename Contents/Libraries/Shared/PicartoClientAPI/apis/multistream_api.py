# coding: utf-8

"""
    Picarto.TV API Documentation

    The Picarto.TV API documentation  Note, for fixed access tokens, the header that needs to be sent is of the format: `Authorization: Bearer yourTokenHere`  This can be generated at https://oauth.picarto.tv/  For chat API, see https://docs.picarto.tv/chat/chat.proto - contact via the email below for implementation details 

    OpenAPI spec version: 1.2.5
    Contact: api@picarto.tv
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import



from ..configuration import Configuration
from ..api_client import ApiClient


class MultistreamApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def user_multistream_accept_post(self, channel_id, **kwargs):
        """
        Accept a multistream invite
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_accept_post(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to accept the invite from (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_multistream_accept_post_with_http_info(channel_id, **kwargs)
        else:
            (data) = self.user_multistream_accept_post_with_http_info(channel_id, **kwargs)
            return data

    def user_multistream_accept_post_with_http_info(self, channel_id, **kwargs):
        """
        Accept a multistream invite
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_accept_post_with_http_info(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to accept the invite from (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_multistream_accept_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params) or (params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `user_multistream_accept_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'channel_id' in params:
            form_params.append(('channel_id', params['channel_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/multistream/accept', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_multistream_decline_post(self, channel_id, **kwargs):
        """
        Decline a multistream invite/leave a multistream you were invited to
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_decline_post(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to decline the invite from/leave the multistream of (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_multistream_decline_post_with_http_info(channel_id, **kwargs)
        else:
            (data) = self.user_multistream_decline_post_with_http_info(channel_id, **kwargs)
            return data

    def user_multistream_decline_post_with_http_info(self, channel_id, **kwargs):
        """
        Decline a multistream invite/leave a multistream you were invited to
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_decline_post_with_http_info(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to decline the invite from/leave the multistream of (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_multistream_decline_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params) or (params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `user_multistream_decline_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'channel_id' in params:
            form_params.append(('channel_id', params['channel_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/multistream/decline', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_multistream_invite_post(self, channel_id, **kwargs):
        """
        Invite a user to a multistream
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_invite_post(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to invite (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_multistream_invite_post_with_http_info(channel_id, **kwargs)
        else:
            (data) = self.user_multistream_invite_post_with_http_info(channel_id, **kwargs)
            return data

    def user_multistream_invite_post_with_http_info(self, channel_id, **kwargs):
        """
        Invite a user to a multistream
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_invite_post_with_http_info(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to invite (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_multistream_invite_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params) or (params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `user_multistream_invite_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'channel_id' in params:
            form_params.append(('channel_id', params['channel_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/multistream/invite', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_multistream_remove_post(self, channel_id, **kwargs):
        """
        Remove someone from your multistream
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_remove_post(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_multistream_remove_post_with_http_info(channel_id, **kwargs)
        else:
            (data) = self.user_multistream_remove_post_with_http_info(channel_id, **kwargs)
            return data

    def user_multistream_remove_post_with_http_info(self, channel_id, **kwargs):
        """
        Remove someone from your multistream
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_remove_post_with_http_info(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_multistream_remove_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params) or (params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `user_multistream_remove_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'channel_id' in params:
            form_params.append(('channel_id', params['channel_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/multistream/remove', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
