# coding: utf-8

"""
    Picarto.TV API Documentation

    The Picarto.TV API documentation  Note, for fixed access tokens, the header that needs to be sent is of the format: `Authorization: Bearer yourTokenHere`  This can be generated at https://oauth.picarto.tv/  For chat API, see https://docs.picarto.tv/chat/chat.proto - contact via the email below for implementation details 

    OpenAPI spec version: 1.2.5
    Contact: api@picarto.tv
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class WebhookApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def webhooks_get(self, client_id, client_secret, **kwargs):
        """
        Get all registered webhooks for your account
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhooks_get(client_id, client_secret, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Your application's client ID (required)
        :param str client_secret: Your application's client secret (required)
        :param int channel_id: A channel ID to filter by
        :return: list[Webhook]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhooks_get_with_http_info(client_id, client_secret, **kwargs)
        else:
            (data) = self.webhooks_get_with_http_info(client_id, client_secret, **kwargs)
            return data

    def webhooks_get_with_http_info(self, client_id, client_secret, **kwargs):
        """
        Get all registered webhooks for your account
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhooks_get_with_http_info(client_id, client_secret, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Your application's client ID (required)
        :param str client_secret: Your application's client secret (required)
        :param int channel_id: A channel ID to filter by
        :return: list[Webhook]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'client_secret', 'channel_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `webhooks_get`")
        # verify the required parameter 'client_secret' is set
        if ('client_secret' not in params) or (params['client_secret'] is None):
            raise ValueError("Missing the required parameter `client_secret` when calling `webhooks_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in params:
            query_params.append(('client_id', params['client_id']))
        if 'client_secret' in params:
            query_params.append(('client_secret', params['client_secret']))
        if 'channel_id' in params:
            query_params.append(('channel_id', params['channel_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/webhooks', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Webhook]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def webhooks_post(self, type, uri, **kwargs):
        """
        Register a webhook
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhooks_post(type, uri, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str type: The webhook type (required)
        :param str uri: Webhook destination URI (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhooks_post_with_http_info(type, uri, **kwargs)
        else:
            (data) = self.webhooks_post_with_http_info(type, uri, **kwargs)
            return data

    def webhooks_post_with_http_info(self, type, uri, **kwargs):
        """
        Register a webhook
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhooks_post_with_http_info(type, uri, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str type: The webhook type (required)
        :param str uri: Webhook destination URI (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'uri']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `webhooks_post`")
        # verify the required parameter 'uri' is set
        if ('uri' not in params) or (params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `webhooks_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'type' in params:
            form_params.append(('type', params['type']))
        if 'uri' in params:
            form_params.append(('uri', params['uri']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/webhooks', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def webhooks_webhook_id_delete(self, webhook_id, client_id, client_secret, **kwargs):
        """
        Delete a webhook
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhooks_webhook_id_delete(webhook_id, client_id, client_secret, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_id: The webhook ID (required)
        :param str client_id: Your application's client ID (required)
        :param str client_secret: Your application's client secret (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhooks_webhook_id_delete_with_http_info(webhook_id, client_id, client_secret, **kwargs)
        else:
            (data) = self.webhooks_webhook_id_delete_with_http_info(webhook_id, client_id, client_secret, **kwargs)
            return data

    def webhooks_webhook_id_delete_with_http_info(self, webhook_id, client_id, client_secret, **kwargs):
        """
        Delete a webhook
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhooks_webhook_id_delete_with_http_info(webhook_id, client_id, client_secret, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_id: The webhook ID (required)
        :param str client_id: Your application's client ID (required)
        :param str client_secret: Your application's client secret (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webhook_id', 'client_id', 'client_secret']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_webhook_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params) or (params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling `webhooks_webhook_id_delete`")
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `webhooks_webhook_id_delete`")
        # verify the required parameter 'client_secret' is set
        if ('client_secret' not in params) or (params['client_secret'] is None):
            raise ValueError("Missing the required parameter `client_secret` when calling `webhooks_webhook_id_delete`")


        collection_formats = {}

        path_params = {}
        if 'webhook_id' in params:
            path_params['webhook_id'] = params['webhook_id']

        query_params = []
        if 'client_id' in params:
            query_params.append(('client_id', params['client_id']))
        if 'client_secret' in params:
            query_params.append(('client_secret', params['client_secret']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/webhooks/{webhook_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def webhooks_webhook_id_get(self, webhook_id, client_id, client_secret, **kwargs):
        """
        Get a webhook
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhooks_webhook_id_get(webhook_id, client_id, client_secret, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_id: The webhook ID (required)
        :param str client_id: Your application's client ID (required)
        :param str client_secret: Your application's client secret (required)
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhooks_webhook_id_get_with_http_info(webhook_id, client_id, client_secret, **kwargs)
        else:
            (data) = self.webhooks_webhook_id_get_with_http_info(webhook_id, client_id, client_secret, **kwargs)
            return data

    def webhooks_webhook_id_get_with_http_info(self, webhook_id, client_id, client_secret, **kwargs):
        """
        Get a webhook
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhooks_webhook_id_get_with_http_info(webhook_id, client_id, client_secret, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_id: The webhook ID (required)
        :param str client_id: Your application's client ID (required)
        :param str client_secret: Your application's client secret (required)
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webhook_id', 'client_id', 'client_secret']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_webhook_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params) or (params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling `webhooks_webhook_id_get`")
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `webhooks_webhook_id_get`")
        # verify the required parameter 'client_secret' is set
        if ('client_secret' not in params) or (params['client_secret'] is None):
            raise ValueError("Missing the required parameter `client_secret` when calling `webhooks_webhook_id_get`")


        collection_formats = {}

        path_params = {}
        if 'webhook_id' in params:
            path_params['webhook_id'] = params['webhook_id']

        query_params = []
        if 'client_id' in params:
            query_params.append(('client_id', params['client_id']))
        if 'client_secret' in params:
            query_params.append(('client_secret', params['client_secret']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/webhooks/{webhook_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Webhook',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def webhooks_webhook_id_put(self, webhook_id, uri, client_id, client_secret, **kwargs):
        """
        Update a webhook's URI  Note: You can not change the webhook type. To do that you must create a new webhook, authenticated by the user. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhooks_webhook_id_put(webhook_id, uri, client_id, client_secret, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_id: The webhook ID (required)
        :param str uri: Webhook destination URI (required)
        :param str client_id: Your application's client ID (required)
        :param str client_secret: Your application's client secret (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhooks_webhook_id_put_with_http_info(webhook_id, uri, client_id, client_secret, **kwargs)
        else:
            (data) = self.webhooks_webhook_id_put_with_http_info(webhook_id, uri, client_id, client_secret, **kwargs)
            return data

    def webhooks_webhook_id_put_with_http_info(self, webhook_id, uri, client_id, client_secret, **kwargs):
        """
        Update a webhook's URI  Note: You can not change the webhook type. To do that you must create a new webhook, authenticated by the user. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhooks_webhook_id_put_with_http_info(webhook_id, uri, client_id, client_secret, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_id: The webhook ID (required)
        :param str uri: Webhook destination URI (required)
        :param str client_id: Your application's client ID (required)
        :param str client_secret: Your application's client secret (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webhook_id', 'uri', 'client_id', 'client_secret']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_webhook_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params) or (params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling `webhooks_webhook_id_put`")
        # verify the required parameter 'uri' is set
        if ('uri' not in params) or (params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `webhooks_webhook_id_put`")
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `webhooks_webhook_id_put`")
        # verify the required parameter 'client_secret' is set
        if ('client_secret' not in params) or (params['client_secret'] is None):
            raise ValueError("Missing the required parameter `client_secret` when calling `webhooks_webhook_id_put`")


        collection_formats = {}

        path_params = {}
        if 'webhook_id' in params:
            path_params['webhook_id'] = params['webhook_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'uri' in params:
            form_params.append(('uri', params['uri']))
        if 'client_id' in params:
            form_params.append(('client_id', params['client_id']))
        if 'client_secret' in params:
            form_params.append(('client_secret', params['client_secret']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/webhooks/{webhook_id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
