# coding: utf-8

"""
    Picarto.TV API Documentation

    The Picarto.TV API documentation  Note, for fixed access tokens, the header that needs to be sent is of the format: `Authorization: Bearer yourTokenHere`  This can be generated at https://oauth.picarto.tv/  For chat API, see https://docs.picarto.tv/chat/chat.proto - contact via the email below for implementation details 

    OpenAPI spec version: 1.2.5
    Contact: api@picarto.tv
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import



from ..configuration import Configuration
from ..api_client import ApiClient


class UserApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def user_adult_post(self, adult, **kwargs):
        """
        Update the user's adult status  **NOTE:** This endpoint is deprecated. Please use /user/streamflags/adult, this endpoint is an alias. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_adult_post(adult, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool adult: If the user is to be made an adult channel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_adult_post_with_http_info(adult, **kwargs)
        else:
            (data) = self.user_adult_post_with_http_info(adult, **kwargs)
            return data

    def user_adult_post_with_http_info(self, adult, **kwargs):
        """
        Update the user's adult status  **NOTE:** This endpoint is deprecated. Please use /user/streamflags/adult, this endpoint is an alias. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_adult_post_with_http_info(adult, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool adult: If the user is to be made an adult channel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['adult']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_adult_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'adult' is set
        if ('adult' not in params) or (params['adult'] is None):
            raise ValueError("Missing the required parameter `adult` when calling `user_adult_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'adult' in params:
            form_params.append(('adult', params['adult']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/adult', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_avatar_post(self, file, **kwargs):
        """
        Upload a new avatar
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_avatar_post(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: File to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_avatar_post_with_http_info(file, **kwargs)
        else:
            (data) = self.user_avatar_post_with_http_info(file, **kwargs)
            return data

    def user_avatar_post_with_http_info(self, file, **kwargs):
        """
        Upload a new avatar
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_avatar_post_with_http_info(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: File to upload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_avatar_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `user_avatar_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/avatar', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_category_post(self, id, **kwargs):
        """
        Update the user's channel title
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_category_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: The category ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_category_post_with_http_info(id, **kwargs)
        else:
            (data) = self.user_category_post_with_http_info(id, **kwargs)
            return data

    def user_category_post_with_http_info(self, id, **kwargs):
        """
        Update the user's channel title
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_category_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: The category ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_category_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_category_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/category', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_email_post(self, email, password, **kwargs):
        """
        Update a user's email address
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_email_post(email, password, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str email: The user's new email address (required)
        :param str password: The user's password (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_email_post_with_http_info(email, password, **kwargs)
        else:
            (data) = self.user_email_post_with_http_info(email, password, **kwargs)
            return data

    def user_email_post_with_http_info(self, email, password, **kwargs):
        """
        Update a user's email address
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_email_post_with_http_info(email, password, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str email: The user's new email address (required)
        :param str password: The user's password (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'password']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_email_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `user_email_post`")
        # verify the required parameter 'password' is set
        if ('password' not in params) or (params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `user_email_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))
        if 'password' in params:
            form_params.append(('password', params['password']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/email', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_emails_follower_post(self, enable, **kwargs):
        """
        Toggle new follower emails
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_emails_follower_post(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable follower emails (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_emails_follower_post_with_http_info(enable, **kwargs)
        else:
            (data) = self.user_emails_follower_post_with_http_info(enable, **kwargs)
            return data

    def user_emails_follower_post_with_http_info(self, enable, **kwargs):
        """
        Toggle new follower emails
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_emails_follower_post_with_http_info(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable follower emails (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_emails_follower_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_emails_follower_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/emails/follower', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_emails_get(self, **kwargs):
        """
        Get the current email settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_emails_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UserEmailSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_emails_get_with_http_info(**kwargs)
        else:
            (data) = self.user_emails_get_with_http_info(**kwargs)
            return data

    def user_emails_get_with_http_info(self, **kwargs):
        """
        Get the current email settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_emails_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UserEmailSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_emails_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/emails', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserEmailSettings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_emails_newsletter_post(self, enable, **kwargs):
        """
        Toggle newsletter emails
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_emails_newsletter_post(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable newsletter emails (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_emails_newsletter_post_with_http_info(enable, **kwargs)
        else:
            (data) = self.user_emails_newsletter_post_with_http_info(enable, **kwargs)
            return data

    def user_emails_newsletter_post_with_http_info(self, enable, **kwargs):
        """
        Toggle newsletter emails
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_emails_newsletter_post_with_http_info(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable newsletter emails (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_emails_newsletter_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_emails_newsletter_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/emails/newsletter', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_emails_online_post(self, enable, **kwargs):
        """
        Toggle stream online emails
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_emails_online_post(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable online emails (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_emails_online_post_with_http_info(enable, **kwargs)
        else:
            (data) = self.user_emails_online_post_with_http_info(enable, **kwargs)
            return data

    def user_emails_online_post_with_http_info(self, enable, **kwargs):
        """
        Toggle stream online emails
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_emails_online_post_with_http_info(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable online emails (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_emails_online_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_emails_online_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/emails/online', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_follow_post(self, id, **kwargs):
        """
        Follow a channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_follow_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: User ID to follow (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_follow_post_with_http_info(id, **kwargs)
        else:
            (data) = self.user_follow_post_with_http_info(id, **kwargs)
            return data

    def user_follow_post_with_http_info(self, id, **kwargs):
        """
        Follow a channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_follow_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: User ID to follow (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_follow_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_follow_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/follow', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_followers_get(self, **kwargs):
        """
        Get information about users following us
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_followers_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: The page to display (defaults to `1`)
        :return: list[BasicFollowerInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_followers_get_with_http_info(**kwargs)
        else:
            (data) = self.user_followers_get_with_http_info(**kwargs)
            return data

    def user_followers_get_with_http_info(self, **kwargs):
        """
        Get information about users following us
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_followers_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: The page to display (defaults to `1`)
        :return: list[BasicFollowerInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_followers_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/followers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[BasicFollowerInfo]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_following_get(self, **kwargs):
        """
        Get information about users we are following
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_following_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: The page to display (defaults to `1`)
        :return: list[BasicFollowingInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_following_get_with_http_info(**kwargs)
        else:
            (data) = self.user_following_get_with_http_info(**kwargs)
            return data

    def user_following_get_with_http_info(self, **kwargs):
        """
        Get information about users we are following
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_following_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: The page to display (defaults to `1`)
        :return: list[BasicFollowingInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_following_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/following', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[BasicFollowingInfo]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_get(self, **kwargs):
        """
        Get private info about the currently authenticated user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UserData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_get_with_http_info(**kwargs)
        else:
            (data) = self.user_get_with_http_info(**kwargs)
            return data

    def user_get_with_http_info(self, **kwargs):
        """
        Get private info about the currently authenticated user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UserData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_jwtkey_get(self, channel_id, bot, **kwargs):
        """
        Generate a bot JWT token to connect to a channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_jwtkey_get(channel_id, bot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: Channel ID you wish to connect to (required)
        :param bool bot: Whether or not this is a bot token (`false` is a user token) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_jwtkey_get_with_http_info(channel_id, bot, **kwargs)
        else:
            (data) = self.user_jwtkey_get_with_http_info(channel_id, bot, **kwargs)
            return data

    def user_jwtkey_get_with_http_info(self, channel_id, bot, **kwargs):
        """
        Generate a bot JWT token to connect to a channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_jwtkey_get_with_http_info(channel_id, bot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: Channel ID you wish to connect to (required)
        :param bool bot: Whether or not this is a bot token (`false` is a user token) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_id', 'bot']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_jwtkey_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params) or (params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `user_jwtkey_get`")
        # verify the required parameter 'bot' is set
        if ('bot' not in params) or (params['bot'] is None):
            raise ValueError("Missing the required parameter `bot` when calling `user_jwtkey_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'channel_id' in params:
            query_params.append(('channel_id', params['channel_id']))
        if 'bot' in params:
            query_params.append(('bot', params['bot']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/jwtkey', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_mobilenotify_follow_post(self, enable, **kwargs):
        """
        Enable/disable follow mobile notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilenotify_follow_post(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable/disable follow notifications (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_mobilenotify_follow_post_with_http_info(enable, **kwargs)
        else:
            (data) = self.user_mobilenotify_follow_post_with_http_info(enable, **kwargs)
            return data

    def user_mobilenotify_follow_post_with_http_info(self, enable, **kwargs):
        """
        Enable/disable follow mobile notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilenotify_follow_post_with_http_info(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable/disable follow notifications (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mobilenotify_follow_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_mobilenotify_follow_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/mobilenotify/follow', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_mobilenotify_get(self, **kwargs):
        """
        Get state of mobile notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilenotify_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: MobileNotifySettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_mobilenotify_get_with_http_info(**kwargs)
        else:
            (data) = self.user_mobilenotify_get_with_http_info(**kwargs)
            return data

    def user_mobilenotify_get_with_http_info(self, **kwargs):
        """
        Get state of mobile notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilenotify_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: MobileNotifySettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mobilenotify_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/mobilenotify', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MobileNotifySettings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_mobilenotify_live_post(self, enable, **kwargs):
        """
        Enable/disable live mobile notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilenotify_live_post(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable/disable live notifications (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_mobilenotify_live_post_with_http_info(enable, **kwargs)
        else:
            (data) = self.user_mobilenotify_live_post_with_http_info(enable, **kwargs)
            return data

    def user_mobilenotify_live_post_with_http_info(self, enable, **kwargs):
        """
        Enable/disable live mobile notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilenotify_live_post_with_http_info(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable/disable live notifications (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mobilenotify_live_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_mobilenotify_live_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/mobilenotify/live', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_mobilenotify_post(self, enable, **kwargs):
        """
        Enable/disable all mobile notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilenotify_post(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable/disable all notifications (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_mobilenotify_post_with_http_info(enable, **kwargs)
        else:
            (data) = self.user_mobilenotify_post_with_http_info(enable, **kwargs)
            return data

    def user_mobilenotify_post_with_http_info(self, enable, **kwargs):
        """
        Enable/disable all mobile notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilenotify_post_with_http_info(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable/disable all notifications (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mobilenotify_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_mobilenotify_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/mobilenotify', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_mobilenotify_subscribe_post(self, enable, **kwargs):
        """
        Enable/disable subscribe mobile notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilenotify_subscribe_post(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable/disable subscribe notifications (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_mobilenotify_subscribe_post_with_http_info(enable, **kwargs)
        else:
            (data) = self.user_mobilenotify_subscribe_post_with_http_info(enable, **kwargs)
            return data

    def user_mobilenotify_subscribe_post_with_http_info(self, enable, **kwargs):
        """
        Enable/disable subscribe mobile notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilenotify_subscribe_post_with_http_info(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable/disable subscribe notifications (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mobilenotify_subscribe_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_mobilenotify_subscribe_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/mobilenotify/subscribe', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_mobilesettings_adult_get(self, **kwargs):
        """
        Check if a user can see adult content in-app
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilesettings_adult_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_mobilesettings_adult_get_with_http_info(**kwargs)
        else:
            (data) = self.user_mobilesettings_adult_get_with_http_info(**kwargs)
            return data

    def user_mobilesettings_adult_get_with_http_info(self, **kwargs):
        """
        Check if a user can see adult content in-app
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilesettings_adult_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mobilesettings_adult_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/mobilesettings/adult', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='bool',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_mobilesettings_adult_post(self, enable, **kwargs):
        """
        Enable/disable adult content in-app
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilesettings_adult_post(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If this user is to be able to see adult content in-app (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_mobilesettings_adult_post_with_http_info(enable, **kwargs)
        else:
            (data) = self.user_mobilesettings_adult_post_with_http_info(enable, **kwargs)
            return data

    def user_mobilesettings_adult_post_with_http_info(self, enable, **kwargs):
        """
        Enable/disable adult content in-app
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_mobilesettings_adult_post_with_http_info(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If this user is to be able to see adult content in-app (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mobilesettings_adult_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_mobilesettings_adult_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/mobilesettings/adult', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_multistream_accept_post(self, channel_id, **kwargs):
        """
        Accept a multistream invite
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_accept_post(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to accept the invite from (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_multistream_accept_post_with_http_info(channel_id, **kwargs)
        else:
            (data) = self.user_multistream_accept_post_with_http_info(channel_id, **kwargs)
            return data

    def user_multistream_accept_post_with_http_info(self, channel_id, **kwargs):
        """
        Accept a multistream invite
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_accept_post_with_http_info(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to accept the invite from (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_multistream_accept_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params) or (params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `user_multistream_accept_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'channel_id' in params:
            form_params.append(('channel_id', params['channel_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/multistream/accept', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_multistream_decline_post(self, channel_id, **kwargs):
        """
        Decline a multistream invite/leave a multistream you were invited to
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_decline_post(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to decline the invite from/leave the multistream of (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_multistream_decline_post_with_http_info(channel_id, **kwargs)
        else:
            (data) = self.user_multistream_decline_post_with_http_info(channel_id, **kwargs)
            return data

    def user_multistream_decline_post_with_http_info(self, channel_id, **kwargs):
        """
        Decline a multistream invite/leave a multistream you were invited to
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_decline_post_with_http_info(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to decline the invite from/leave the multistream of (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_multistream_decline_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params) or (params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `user_multistream_decline_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'channel_id' in params:
            form_params.append(('channel_id', params['channel_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/multistream/decline', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_multistream_invite_post(self, channel_id, **kwargs):
        """
        Invite a user to a multistream
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_invite_post(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to invite (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_multistream_invite_post_with_http_info(channel_id, **kwargs)
        else:
            (data) = self.user_multistream_invite_post_with_http_info(channel_id, **kwargs)
            return data

    def user_multistream_invite_post_with_http_info(self, channel_id, **kwargs):
        """
        Invite a user to a multistream
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_invite_post_with_http_info(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to invite (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_multistream_invite_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params) or (params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `user_multistream_invite_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'channel_id' in params:
            form_params.append(('channel_id', params['channel_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/multistream/invite', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_multistream_remove_post(self, channel_id, **kwargs):
        """
        Remove someone from your multistream
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_remove_post(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_multistream_remove_post_with_http_info(channel_id, **kwargs)
        else:
            (data) = self.user_multistream_remove_post_with_http_info(channel_id, **kwargs)
            return data

    def user_multistream_remove_post_with_http_info(self, channel_id, **kwargs):
        """
        Remove someone from your multistream
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_multistream_remove_post_with_http_info(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: The channel ID to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_multistream_remove_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params) or (params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `user_multistream_remove_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'channel_id' in params:
            form_params.append(('channel_id', params['channel_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/multistream/remove', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_notifications_all_delete_post(self, **kwargs):
        """
        Delete all of this user's notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_notifications_all_delete_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_notifications_all_delete_post_with_http_info(**kwargs)
        else:
            (data) = self.user_notifications_all_delete_post_with_http_info(**kwargs)
            return data

    def user_notifications_all_delete_post_with_http_info(self, **kwargs):
        """
        Delete all of this user's notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_notifications_all_delete_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_notifications_all_delete_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/notifications/all/delete', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_notifications_all_read_post(self, **kwargs):
        """
        Mark all of this user's notifications as read
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_notifications_all_read_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_notifications_all_read_post_with_http_info(**kwargs)
        else:
            (data) = self.user_notifications_all_read_post_with_http_info(**kwargs)
            return data

    def user_notifications_all_read_post_with_http_info(self, **kwargs):
        """
        Mark all of this user's notifications as read
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_notifications_all_read_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_notifications_all_read_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/notifications/all/read', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_notifications_get(self, **kwargs):
        """
        Get this user's notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_notifications_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Notifications
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_notifications_get_with_http_info(**kwargs)
        else:
            (data) = self.user_notifications_get_with_http_info(**kwargs)
            return data

    def user_notifications_get_with_http_info(self, **kwargs):
        """
        Get this user's notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_notifications_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Notifications
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_notifications_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/notifications', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Notifications',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_notifications_uuid_delete_post(self, uuid, **kwargs):
        """
        Delete a notification for this user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_notifications_uuid_delete_post(uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str uuid: UUID of the notification you wish to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_notifications_uuid_delete_post_with_http_info(uuid, **kwargs)
        else:
            (data) = self.user_notifications_uuid_delete_post_with_http_info(uuid, **kwargs)
            return data

    def user_notifications_uuid_delete_post_with_http_info(self, uuid, **kwargs):
        """
        Delete a notification for this user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_notifications_uuid_delete_post_with_http_info(uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str uuid: UUID of the notification you wish to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_notifications_uuid_delete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params) or (params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `user_notifications_uuid_delete_post`")


        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/notifications/{uuid}/delete', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_notifications_uuid_read_post(self, uuid, **kwargs):
        """
        Mark all of this user's notifications as read
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_notifications_uuid_read_post(uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str uuid: UUID of the notification you wish to mark as read (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_notifications_uuid_read_post_with_http_info(uuid, **kwargs)
        else:
            (data) = self.user_notifications_uuid_read_post_with_http_info(uuid, **kwargs)
            return data

    def user_notifications_uuid_read_post_with_http_info(self, uuid, **kwargs):
        """
        Mark all of this user's notifications as read
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_notifications_uuid_read_post_with_http_info(uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str uuid: UUID of the notification you wish to mark as read (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_notifications_uuid_read_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params) or (params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `user_notifications_uuid_read_post`")


        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/notifications/{uuid}/read', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_onlinenotify_channel_id_app_post(self, channel_id, enable, **kwargs):
        """
        Enable/disable notifications for a given channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_onlinenotify_channel_id_app_post(channel_id, enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: Channel ID of the user you want to switch notifications for (required)
        :param bool enable: If we are to enable/disable notifications for this channel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_onlinenotify_channel_id_app_post_with_http_info(channel_id, enable, **kwargs)
        else:
            (data) = self.user_onlinenotify_channel_id_app_post_with_http_info(channel_id, enable, **kwargs)
            return data

    def user_onlinenotify_channel_id_app_post_with_http_info(self, channel_id, enable, **kwargs):
        """
        Enable/disable notifications for a given channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_onlinenotify_channel_id_app_post_with_http_info(channel_id, enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: Channel ID of the user you want to switch notifications for (required)
        :param bool enable: If we are to enable/disable notifications for this channel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_id', 'enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_onlinenotify_channel_id_app_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params) or (params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `user_onlinenotify_channel_id_app_post`")
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_onlinenotify_channel_id_app_post`")


        collection_formats = {}

        path_params = {}
        if 'channel_id' in params:
            path_params['channel_id'] = params['channel_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/onlinenotify/{channel_id}/app', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_onlinenotify_channel_id_email_post(self, channel_id, enable, **kwargs):
        """
        Enable/disable notifications for a given channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_onlinenotify_channel_id_email_post(channel_id, enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: Channel ID of the user you want to switch notifications for (required)
        :param bool enable: If we are to enable/disable notifications for this channel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_onlinenotify_channel_id_email_post_with_http_info(channel_id, enable, **kwargs)
        else:
            (data) = self.user_onlinenotify_channel_id_email_post_with_http_info(channel_id, enable, **kwargs)
            return data

    def user_onlinenotify_channel_id_email_post_with_http_info(self, channel_id, enable, **kwargs):
        """
        Enable/disable notifications for a given channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_onlinenotify_channel_id_email_post_with_http_info(channel_id, enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: Channel ID of the user you want to switch notifications for (required)
        :param bool enable: If we are to enable/disable notifications for this channel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_id', 'enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_onlinenotify_channel_id_email_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params) or (params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `user_onlinenotify_channel_id_email_post`")
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_onlinenotify_channel_id_email_post`")


        collection_formats = {}

        path_params = {}
        if 'channel_id' in params:
            path_params['channel_id'] = params['channel_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/onlinenotify/{channel_id}/email', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_onlinenotify_channel_id_get(self, channel_id, **kwargs):
        """
        Get the online notification settings for this channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_onlinenotify_channel_id_get(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: Channel ID of the user you want to get the notifications for (required)
        :return: OnlineNotifySettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_onlinenotify_channel_id_get_with_http_info(channel_id, **kwargs)
        else:
            (data) = self.user_onlinenotify_channel_id_get_with_http_info(channel_id, **kwargs)
            return data

    def user_onlinenotify_channel_id_get_with_http_info(self, channel_id, **kwargs):
        """
        Get the online notification settings for this channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_onlinenotify_channel_id_get_with_http_info(channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int channel_id: Channel ID of the user you want to get the notifications for (required)
        :return: OnlineNotifySettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_onlinenotify_channel_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params) or (params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `user_onlinenotify_channel_id_get`")


        collection_formats = {}

        path_params = {}
        if 'channel_id' in params:
            path_params['channel_id'] = params['channel_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/onlinenotify/{channel_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OnlineNotifySettings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_password_post(self, old, new, **kwargs):
        """
        Update a user's password
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_password_post(old, new, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str old: The user's old password (required)
        :param str new: The user's new password (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_password_post_with_http_info(old, new, **kwargs)
        else:
            (data) = self.user_password_post_with_http_info(old, new, **kwargs)
            return data

    def user_password_post_with_http_info(self, old, new, **kwargs):
        """
        Update a user's password
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_password_post_with_http_info(old, new, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str old: The user's old password (required)
        :param str new: The user's new password (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['old', 'new']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_password_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'old' is set
        if ('old' not in params) or (params['old'] is None):
            raise ValueError("Missing the required parameter `old` when calling `user_password_post`")
        # verify the required parameter 'new' is set
        if ('new' not in params) or (params['new'] is None):
            raise ValueError("Missing the required parameter `new` when calling `user_password_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'old' in params:
            form_params.append(('old', params['old']))
        if 'new' in params:
            form_params.append(('new', params['new']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/password', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_private_state_post(self, enable, **kwargs):
        """
        Enable/disable your private stream - enable when enabled to generate a new token
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_private_state_post(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable private mode (enable generates a new token regardless of state) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_private_state_post_with_http_info(enable, **kwargs)
        else:
            (data) = self.user_private_state_post_with_http_info(enable, **kwargs)
            return data

    def user_private_state_post_with_http_info(self, enable, **kwargs):
        """
        Enable/disable your private stream - enable when enabled to generate a new token
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_private_state_post_with_http_info(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable private mode (enable generates a new token regardless of state) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_private_state_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_private_state_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/private/state', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_recordings_state_post(self, enable, **kwargs):
        """
        Enable/disable recordings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_recordings_state_post(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable private mode (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_recordings_state_post_with_http_info(enable, **kwargs)
        else:
            (data) = self.user_recordings_state_post_with_http_info(enable, **kwargs)
            return data

    def user_recordings_state_post_with_http_info(self, enable, **kwargs):
        """
        Enable/disable recordings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_recordings_state_post_with_http_info(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable private mode (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_recordings_state_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_recordings_state_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/recordings/state', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_streamflags_adult_post(self, enable, **kwargs):
        """
        Toggle adult state on the channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_streamflags_adult_post(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable adult mode (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_streamflags_adult_post_with_http_info(enable, **kwargs)
        else:
            (data) = self.user_streamflags_adult_post_with_http_info(enable, **kwargs)
            return data

    def user_streamflags_adult_post_with_http_info(self, enable, **kwargs):
        """
        Toggle adult state on the channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_streamflags_adult_post_with_http_info(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable adult mode (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_streamflags_adult_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_streamflags_adult_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/streamflags/adult', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_streamflags_commission_post(self, enable, **kwargs):
        """
        Toggle commission state on the channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_streamflags_commission_post(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable commission mode (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_streamflags_commission_post_with_http_info(enable, **kwargs)
        else:
            (data) = self.user_streamflags_commission_post_with_http_info(enable, **kwargs)
            return data

    def user_streamflags_commission_post_with_http_info(self, enable, **kwargs):
        """
        Toggle commission state on the channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_streamflags_commission_post_with_http_info(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable commission mode (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_streamflags_commission_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_streamflags_commission_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/streamflags/commission', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_streamflags_gaming_post(self, enable, **kwargs):
        """
        Toggle gaming state on the channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_streamflags_gaming_post(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable gaming mode (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_streamflags_gaming_post_with_http_info(enable, **kwargs)
        else:
            (data) = self.user_streamflags_gaming_post_with_http_info(enable, **kwargs)
            return data

    def user_streamflags_gaming_post_with_http_info(self, enable, **kwargs):
        """
        Toggle gaming state on the channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_streamflags_gaming_post_with_http_info(enable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enable: If we are to enable or disable gaming mode (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_streamflags_gaming_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enable' is set
        if ('enable' not in params) or (params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `user_streamflags_gaming_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enable' in params:
            form_params.append(('enable', params['enable']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/streamflags/gaming', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_streamkey_get(self, **kwargs):
        """
        Get the stream key of the currently authenticated user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_streamkey_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_streamkey_get_with_http_info(**kwargs)
        else:
            (data) = self.user_streamkey_get_with_http_info(**kwargs)
            return data

    def user_streamkey_get_with_http_info(self, **kwargs):
        """
        Get the stream key of the currently authenticated user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_streamkey_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_streamkey_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/streamkey', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_subscribers_get(self, **kwargs):
        """
        Get information about users subscribed to us
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_subscribers_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: The page to display (defaults to `1`)
        :return: list[BasicFollowerInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_subscribers_get_with_http_info(**kwargs)
        else:
            (data) = self.user_subscribers_get_with_http_info(**kwargs)
            return data

    def user_subscribers_get_with_http_info(self, **kwargs):
        """
        Get information about users subscribed to us
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_subscribers_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: The page to display (defaults to `1`)
        :return: list[BasicFollowerInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_subscribers_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/subscribers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[BasicFollowerInfo]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_subscriptions_get(self, **kwargs):
        """
        Get information about users we are subscribed to
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_subscriptions_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: The page to display (defaults to `1`)
        :return: list[BasicFollowingInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_subscriptions_get_with_http_info(**kwargs)
        else:
            (data) = self.user_subscriptions_get_with_http_info(**kwargs)
            return data

    def user_subscriptions_get_with_http_info(self, **kwargs):
        """
        Get information about users we are subscribed to
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_subscriptions_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: The page to display (defaults to `1`)
        :return: list[BasicFollowingInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_subscriptions_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/subscriptions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[BasicFollowingInfo]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_title_post(self, title, **kwargs):
        """
        Update the user's channel title
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_title_post(title, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str title: The new title (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_title_post_with_http_info(title, **kwargs)
        else:
            (data) = self.user_title_post_with_http_info(title, **kwargs)
            return data

    def user_title_post_with_http_info(self, title, **kwargs):
        """
        Update the user's channel title
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_title_post_with_http_info(title, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str title: The new title (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_title_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title' is set
        if ('title' not in params) or (params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `user_title_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml', 'application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded', 'application/json', 'application/xml'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/title', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_unfollow_post(self, id, **kwargs):
        """
        Unfollow a channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_unfollow_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: User ID to follow (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_unfollow_post_with_http_info(id, **kwargs)
        else:
            (data) = self.user_unfollow_post_with_http_info(id, **kwargs)
            return data

    def user_unfollow_post_with_http_info(self, id, **kwargs):
        """
        Unfollow a channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_unfollow_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: User ID to follow (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_unfollow_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_unfollow_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['OAuth2Access', 'OAuth2Implicit']

        return self.api_client.call_api('/user/unfollow', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
