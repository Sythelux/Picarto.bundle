# coding: utf-8

"""
    Picarto.TV API Documentation

    The Picarto.TV API documentation  Note, for fixed access tokens, the header that needs to be sent is of the format: `Authorization: Bearer yourTokenHere`  This can be generated at https://oauth.picarto.tv/  For chat API, see https://docs.picarto.tv/chat/chat.proto - contact via the email below for implementation details 

    OpenAPI spec version: 1.2.5
    Contact: api@picarto.tv
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import io
import json
import re
import ssl
from urllib import urlencode

from .configuration import Configuration

HTTP = None

class RESTResponse(io.IOBase):

    def __init__(self, resp):
        self.urllib3_response = resp
        self.status = 200
        self.reason = ""
        self.data = resp.content

    def getheaders(self):
        """
        Returns a dictionary of the response headers.
        """
        return None
        # return self.urllib3_response.getheaders()

    def getheader(self, name, default=None):
        """
        Returns a given response header.
        """
        return default if default else None
        # return self.urllib3_response.getheader(name, default)


class RESTClientObject(object):

    def __init__(self, pools_size=4, maxsize=4):
        # urllib3.PoolManager will pass all kw parameters to connectionpool
        # https://github.com/shazow/urllib3/blob/f9409436f83aeb79fbaf090181cd81b784f1b8ce/urllib3/poolmanager.py#L75
        # https://github.com/shazow/urllib3/blob/f9409436f83aeb79fbaf090181cd81b784f1b8ce/urllib3/connectionpool.py#L680
        # maxsize is the number of requests to host that are allowed in parallel
        # ca_certs vs cert_file vs key_file
        # http://stackoverflow.com/a/23957365/2985775

        # cert_reqs
        if Configuration().verify_ssl:
            cert_reqs = ssl.CERT_REQUIRED
        else:
            cert_reqs = ssl.CERT_NONE

        # ca_certs
        if Configuration().ssl_ca_cert:
            ca_certs = Configuration().ssl_ca_cert
        # else:
        #     # if not set certificate file, use Mozilla's root certificates.
        #     ca_certs = certifi.where()

        # cert_file
        cert_file = Configuration().cert_file

        # key file
        key_file = Configuration().key_file

        # proxy
        proxy = Configuration().proxy

        # https pool manager
        # if proxy:
        #     self.pool_manager = urllib.ProxyManager(
        #         num_pools=pools_size,
        #         maxsize=maxsize,
        #         cert_reqs=cert_reqs,
        #         ca_certs=ca_certs,
        #         cert_file=cert_file,
        #         key_file=key_file,
        #         proxy_url=proxy
        #     )
        # else:
        #     self.pool_manager = urllib.PoolManager(
        #         num_pools=pools_size,
        #         maxsize=maxsize,
        #         cert_reqs=cert_reqs,
        #         ca_certs=ca_certs,
        #         cert_file=cert_file,
        #         key_file=key_file
        #     )

    def request(self, method, url, query_params=None, headers=None,
                body=None, post_params=None, i_preload_content=True, i_request_timeout=None):
        """
        :param method: http request method
        :param url: http request url
        :param query_params: query parameters in the url
        :param headers: http request headers
        :param body: request json body, for `application/json`
        :param post_params: request post parameters,
                            `application/x-www-form-urlencoded`
                            and `multipart/form-data`
        :param i_preload_content: if False, the urllib3.HTTPResponse object will be returned without
                                 reading/decoding response data. Default is True.
        :param i_request_timeout: timeout setting for this request. If one number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of (connection, read) timeouts.
        """
        # Log.Debug("request " + str(method) + ", " + str(url) + ", " + str(query_params) + ", " + str(body))
        method = method.upper()
        assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT', 'PATCH', 'OPTIONS']

        if post_params and body:
            raise ValueError(
                "body parameter cannot be used with post_params parameter."
            )

        post_params = post_params or {}
        headers = headers or {}

        timeout = None
        # if i_request_timeout:
        # if isinstance(i_request_timeout, (int, long)):
        # timeout = urllib3.Timeout(total=i_request_timeout)
        # elif isinstance(i_request_timeout, tuple) and len(i_request_timeout) == 2:
        # timeout = urllib3.Timeout(connect=i_request_timeout[0], read=i_request_timeout[1])

        if 'Content-Type' not in headers:
            headers['Content-Type'] = 'application/json'

        try:
            # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`
            if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:
                if query_params:
                    url += '?' + urlencode(query_params)
                if re.search('json', headers['Content-Type'], re.IGNORECASE):
                    request_body = None
                    if body:
                        request_body = json.dumps(body)
                    #  def Request(self
                    # , url
                    # , values=None
                    # , headers={}
                    # , cacheTime=None
                    # , encoding=None
                    # , errors=None
                    # , timeout=GLOBAL_DEFAULT_TIMEOUT
                    # , immediate=False
                    # , sleep=0
                    # , data=None
                    # , follow_redirects=True
                    # , method=None):
                    r = HTTP.Request(method=method,
                                     url=url,
                                     data=request_body,
                                     headers=headers
                                     )
                elif headers['Content-Type'] == 'application/x-www-form-urlencoded':
                    r = self.pool_manager.request(method, url,
                                                  fields=post_params,
                                                  encode_multipart=False,
                                                  preload_content=i_preload_content,
                                                  timeout=timeout,
                                                  headers=headers)
                elif headers['Content-Type'] == 'multipart/form-data':
                    # must del headers['Content-Type'], or the correct Content-Type
                    # which generated by urllib3 will be overwritten.
                    del headers['Content-Type']
                    r = HTTP.Request(method=method,
                                     values=post_params,
                                     url=url,
                                     headers=headers
                                     )
                    # r = self.pool_manager.request(method, url,
                    #                               fields=post_params,
                    #                               encode_multipart=True,
                    #                               preload_content=i_preload_content,
                    #                               timeout=timeout,
                    #                               headers=headers)
                # Pass a `string` parameter directly in the body to support
                # other content types than Json when `body` argument is provided
                # in serialized form
                elif isinstance(body, str):
                    request_body = body
                    r = HTTP.Request(method=method,
                                     data=request_body,
                                     url=url,
                                     headers=headers
                                     )
                    # r = self.pool_manager.request(method, url,
                    #                               body=request_body,
                    #                               preload_content=i_preload_content,
                    #                               timeout=timeout,
                    #                               headers=headers)
                else:
                    # Cannot generate the request from given parameters
                    msg = """Cannot prepare a request message for provided arguments.
                             Please check that your arguments match declared content type."""
                    raise ApiException(status=0, reason=msg)
            # For `GET`, `HEAD`
            else:
                r = HTTP.Request(method=method,
                                 values=query_params,
                                 url=url,
                                 headers=headers
                                 )
                # r = self.pool_manager.request(method, url,
                #                               fields=query_params,
                #                               preload_content=i_preload_content,
                #                               timeout=timeout,
                #                               headers=headers)
        except Exception as e:
            raise ApiException(status=0, reason=str(e))

        if i_preload_content:
            r = RESTResponse(r)

            # In the python 3, the response.data is bytes.
            # we need to decode it to string.
            # if PY3:
            #     r.data = r.data.decode('utf8')

            # # Log response body
            # # Log.Debug("response body: %s", r.data)

        if not 200 <= r.status <= 299:
            raise ApiException(http_resp=r)

        return r

    def GET(self, url, headers=None, query_params=None, i_preload_content=True, i_request_timeout=None):
        return self.request("GET", url,
                            headers=headers,
                            i_preload_content=i_preload_content,
                            i_request_timeout=i_request_timeout,
                            query_params=query_params)

    def HEAD(self, url, headers=None, query_params=None, i_preload_content=True, i_request_timeout=None):
        return self.request("HEAD", url,
                            headers=headers,
                            i_preload_content=i_preload_content,
                            i_request_timeout=i_request_timeout,
                            query_params=query_params)

    def OPTIONS(self, url, headers=None, query_params=None, post_params=None, body=None, i_preload_content=True,
                i_request_timeout=None):
        return self.request("OPTIONS", url,
                            headers=headers,
                            query_params=query_params,
                            post_params=post_params,
                            i_preload_content=i_preload_content,
                            i_request_timeout=i_request_timeout,
                            body=body)

    def DELETE(self, url, headers=None, query_params=None, body=None, i_preload_content=True, i_request_timeout=None):
        return self.request("DELETE", url,
                            headers=headers,
                            query_params=query_params,
                            i_preload_content=i_preload_content,
                            i_request_timeout=i_request_timeout,
                            body=body)

    def POST(self, url, headers=None, query_params=None, post_params=None, body=None, i_preload_content=True,
             i_request_timeout=None):
        return self.request("POST", url,
                            headers=headers,
                            query_params=query_params,
                            post_params=post_params,
                            i_preload_content=i_preload_content,
                            i_request_timeout=i_request_timeout,
                            body=body)

    def PUT(self, url, headers=None, query_params=None, post_params=None, body=None, i_preload_content=True,
            i_request_timeout=None):
        return self.request("PUT", url,
                            headers=headers,
                            query_params=query_params,
                            post_params=post_params,
                            i_preload_content=i_preload_content,
                            i_request_timeout=i_request_timeout,
                            body=body)

    def PATCH(self, url, headers=None, query_params=None, post_params=None, body=None, i_preload_content=True,
              i_request_timeout=None):
        return self.request("PATCH", url,
                            headers=headers,
                            query_params=query_params,
                            post_params=post_params,
                            i_preload_content=i_preload_content,
                            i_request_timeout=i_request_timeout,
                            body=body)


class ApiException(Exception):

    def __init__(self, status=None, reason=None, http_resp=None):
        if http_resp:
            self.status = http_resp.status
            self.reason = http_resp.reason
            self.body = http_resp.data
            self.headers = http_resp.getheaders()
        else:
            self.status = status
            self.reason = reason
            self.body = None
            self.headers = None

    def __str__(self):
        """
        Custom error messages for exception
        """
        error_message = "({0})\n" \
                        "Reason: {1}\n".format(self.status, self.reason)
        if self.headers:
            error_message += "HTTP response headers: {0}\n".format(self.headers)

        if self.body:
            error_message += "HTTP response body: {0}\n".format(self.body)

        return error_message
